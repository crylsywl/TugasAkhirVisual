/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AplikasiRumah;

//import javax.swing.*;
//import java.awt.*;
//import java.awt.event.ActionEvent;
//import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.nio.charset.StandardCharsets;
/**
 *
 * @author Asus
 */
public class Karyawan extends javax.swing.JFrame {
    private DefaultTableModel tbl;
    /**
     * Creates new form Karyawan
     */
    public Karyawan() {
        initComponents();
        tabel();
        autonumber();
    }
    
    protected void autonumber(){ 
    try { 
        String sql = "SELECT `Id Karyawan` FROM karyawan order by `Id Karyawan` asc"; 
        Statement st = koneksi.getConnection().createStatement();
        ResultSet rs = st.executeQuery(sql); 
        idField.setText("USR0001"); 
        while (rs.next()) {
            String idKaryawan = rs.getString("Id Karyawan");
            if (idKaryawan.length() > 3) {
                String angka = idKaryawan.substring(3); // karena "USR" panjangnya 3
                if (!angka.isEmpty()) {
                    int USR = Integer.parseInt(angka) + 1;

                    String Nol = "";
                    if (USR < 10) {
                        Nol = "000";
                    } else if (USR < 100) {
                        Nol = "00";
                    } else if (USR < 1000) {
                        Nol = "0";
                    }

                    idField.setText("USR" + Nol + USR);
                }
            }
        } 
    }catch(Exception e){ 
        JOptionPane.showMessageDialog(null, "Auto Number Gagal" +e); 
    } 
    }
    
     public void tabel(){
        tbl = new DefaultTableModel();
        tbl.addColumn("Id Karyawan");
        tbl.addColumn("Nama Karyawan");
        tbl.addColumn("password");
        
        try {
            Statement st = (Statement)  koneksi.getConnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM karyawan");
            
            while (rs.next()){
             tbl.addRow(new Object[]{
                rs.getString("Id Karyawan"),
                rs.getString("Nama Karyawan"),
                rs.getString("password"),
         
            });
             displayArea.setModel(tbl); 
        }
 //           JOptionPane.showMessageDialog(null, "Koneksi Database  Berhasil");
            
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Koneksi Database Gagal" + e.getMessage());
        }
    }
     
     private static String hashPassword(String password) {
        if (password == null || password.isEmpty()) {
            return null; // Atau throw IllegalArgumentException
        }
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes(StandardCharsets.UTF_8));
            // Konversi byte array ke string heksadesimal
            StringBuilder sb = new StringBuilder();
            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }
            return sb.toString();
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error hashing password: Algoritma tidak ditemukan.", "Hashing Error", JOptionPane.ERROR_MESSAGE);
            return null; 
        }
    }
     
     

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        searchField = new javax.swing.JTextField();
        namaField = new javax.swing.JTextField();
        idField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTable();
        hapus = new javax.swing.JLabel();
        ubah = new javax.swing.JLabel();
        simpan = new javax.swing.JLabel();
        back = new javax.swing.JLabel();
        search = new javax.swing.JLabel();
        passwordField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Id Karyawan", "Nama Karyawan" }));
        jComboBox1.setOpaque(false);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 95, -1, -1));

        searchField.setBorder(null);
        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        getContentPane().add(searchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 98, 140, -1));

        namaField.setBackground(new java.awt.Color(229, 245, 255));
        namaField.setBorder(null);
        getContentPane().add(namaField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 235, 240, -1));

        idField.setEditable(false);
        idField.setBackground(new java.awt.Color(229, 245, 255));
        idField.setBorder(null);
        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });
        getContentPane().add(idField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 161, 240, -1));

        displayArea.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Id Karyawan", "Nama Karyawan"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayAreaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(displayArea);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, 500, 350));

        hapus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hapus.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                hapusMouseClicked(evt);
            }
        });
        getContentPane().add(hapus, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 353, 68, 27));

        ubah.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ubah.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ubahMouseClicked(evt);
            }
        });
        getContentPane().add(ubah, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 353, 68, 27));

        simpan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        simpan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                simpanMouseClicked(evt);
            }
        });
        getContentPane().add(simpan, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 353, 68, 27));

        back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        back.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMouseClicked(evt);
            }
        });
        getContentPane().add(back, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 45, 30, 30));

        search.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchMouseClicked(evt);
            }
        });
        getContentPane().add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(501, 95, 39, 25));

        passwordField.setBackground(new java.awt.Color(229, 245, 255));
        passwordField.setBorder(null);
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        getContentPane().add(passwordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 310, 240, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/Data Karyawan.jpg"))); // NOI18N
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void simpanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_simpanMouseClicked
        
        String id = idField.getText();
        String nama = namaField.getText().trim();
        // Jika passwordField adalah JPasswordField, gunakan: new String(passwordField.getPassword()).trim();
        String plainPassword = passwordField.getText().trim(); 
        

        if (nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama Karyawan tidak boleh kosong!", "Input Error", JOptionPane.ERROR_MESSAGE);
            namaField.requestFocus();
            return;
        }
        if (plainPassword.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Password tidak boleh kosong!", "Input Error", JOptionPane.ERROR_MESSAGE);
            passwordField.requestFocus();
            return;
        }

        String hashedPassword = hashPassword(plainPassword);
        if (hashedPassword == null) {
            // Pesan error sudah ditampilkan oleh hashPassword()
            return;
        }

        // Id Karyawan diasumsikan AUTO_INCREMENT oleh database
        String query = "INSERT INTO karyawan (`Id Karyawan`,`Nama Karyawan`, `password`) VALUES (?, ?, ?)";
        try (Connection connection = koneksi.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            
            preparedStatement.setString(1, id);
            preparedStatement.setString(2, nama);
            preparedStatement.setString(3, hashedPassword);
            
            preparedStatement.executeUpdate();
            JOptionPane.showMessageDialog(this, "Data karyawan berhasil disimpan.");
            tabel(); // Muat ulang data tabel
            clear(); // Bersihkan field input
            autonumber();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_simpanMouseClicked
    private void clear() {
        // Clear the input fields
        namaField.setText("");
        searchField.setText("");
        passwordField.setText("");
        }
    private void ubahMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ubahMouseClicked
        String idText = idField.getText().trim();
        String nama = namaField.getText().trim();
        String plainPassword = passwordField.getText(); // jangan di-trim

        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID Karyawan tidak boleh kosong untuk mengubah data!", "Input Error", JOptionPane.ERROR_MESSAGE);
            idField.requestFocus();
            return;
        }
        if (nama.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Nama Karyawan tidak boleh kosong!", "Input Error", JOptionPane.ERROR_MESSAGE);
            namaField.requestFocus();
            return;
        }

        String id = idText;
        String query;
        Connection connection = null;
        PreparedStatement preparedStatement = null;

        try {
            connection = koneksi.getConnection();

            if (!plainPassword.isEmpty()) {
                // Konfirmasi sebelum ganti password
                int confirm = JOptionPane.showOptionDialog(
                    this,
                    "Apakah Anda yakin ingin mengganti password?",
                    "Konfirmasi",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    new Object[]{"Yakin", "Kembali"}, // Tombol custom
                    "Kembali" // Default focus
                );

                if (confirm != JOptionPane.YES_OPTION) {
                    // Batal mengganti password
                    return;
                }

                String hashedPassword = hashPassword(plainPassword);
                if (hashedPassword == null) return;

                query = "UPDATE karyawan SET `Nama Karyawan` = ?, `password` = ? WHERE `Id Karyawan` = ?";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, nama);
                preparedStatement.setString(2, hashedPassword);
                preparedStatement.setString(3, id);

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Password telah diganti.");
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal mengubah data. ID tidak ditemukan atau tidak ada perubahan.", "Update Info", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                // Hanya ubah nama
                query = "UPDATE karyawan SET `Nama Karyawan` = ? WHERE `Id Karyawan` = ?";
                preparedStatement = connection.prepareStatement(query);
                preparedStatement.setString(1, nama);
                preparedStatement.setString(2, id);

                int rowsAffected = preparedStatement.executeUpdate();
                if (rowsAffected > 0) {
                    JOptionPane.showMessageDialog(this, "Data karyawan berhasil diubah.");
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal mengubah data. ID tidak ditemukan atau tidak ada perubahan.", "Update Info", JOptionPane.INFORMATION_MESSAGE);
                }
            }

            tabel();    // Muat ulang tabel
            clear();    // Bersihkan field
            autonumber();

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal mengubah data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                if (preparedStatement != null) preparedStatement.close();
                if (connection != null) connection.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_ubahMouseClicked

    private void hapusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hapusMouseClicked
        String idText = idField.getText().trim();
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "ID Karyawan tidak boleh kosong untuk menghapus data!", "Input Error", JOptionPane.ERROR_MESSAGE);
            idField.requestFocus();
            return;
        }
        
        int id;
        try {
            id = Integer.parseInt(idText);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID Karyawan harus berupa angka.", "Input Error", JOptionPane.ERROR_MESSAGE);
            idField.requestFocus();
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Apakah Anda yakin ingin menghapus data karyawan dengan ID: " + id + "?", "Konfirmasi Hapus", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) {
            return;
        }

        String query = "DELETE FROM karyawan WHERE `Id Karyawan` = ?";
        try (Connection connection = koneksi.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, id);
            int rowsAffected = preparedStatement.executeUpdate();
            if (rowsAffected > 0) {
                 JOptionPane.showMessageDialog(this, "Data karyawan berhasil dihapus.");
            } else {
                JOptionPane.showMessageDialog(this, "Data karyawan dengan ID tersebut tidak ditemukan.", "Hapus Info", JOptionPane.INFORMATION_MESSAGE);
            }
            tabel();
            clear();
            autonumber();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal menghapus data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hapusMouseClicked

    private void backMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMouseClicked
        // TODO add your handling code here:
        Master MASTERPAGE = new Master();
        MASTERPAGE.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backMouseClicked

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
        try{
            Statement st = (Statement)  koneksi.getConnection().createStatement();
            ResultSet rs = st.executeQuery("SELECT * FROM karyawan WHERE `karyawan`.`Id Karyawan` = '"+idField.getText()+"'");

           while (rs.next()) {
                idField.setText(rs.getString("Id Karyawan"));
                namaField.setText(rs.getString("Nama Karyawan"));
            }
            
       }catch(Exception e){
            JOptionPane.showMessageDialog(null,"GAGAL");
        }
        tabel();
    }//GEN-LAST:event_idFieldActionPerformed

    private void searchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tbl = new DefaultTableModel();
        tbl.addColumn("Id Karyawan");
        tbl.addColumn("Nama Karyawan");
    
    try {
        Statement st = (Statement) koneksi.getConnection().createStatement();
        String selectedColumn = (String) jComboBox1.getSelectedItem();
        String searchText = searchField.getText();
        
        String query = "SELECT * FROM karyawan WHERE `" + selectedColumn + "` LIKE '%" + searchText + "%'";
        ResultSet rs = st.executeQuery(query);

        while (rs.next()) {
            tbl.addRow(new Object[]{
                rs.getString("Id Karyawan"),
                rs.getString("Nama Karyawan"),
            });
            displayArea.setModel(tbl);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Koneksi Database Gagal" + e.getMessage());
    }
    }//GEN-LAST:event_searchMouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
       
    }//GEN-LAST:event_jLabel1MouseClicked

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tbl = new DefaultTableModel();
        tbl.addColumn("Id Karyawan");
        tbl.addColumn("Nama Karyawan");
    
    try {
        Statement st = (Statement) koneksi.getConnection().createStatement();
        String selectedColumn = (String) jComboBox1.getSelectedItem();
        String searchText = searchField.getText();
        
        String query = "SELECT * FROM karyawan WHERE `" + selectedColumn + "` LIKE '%" + searchText + "%'";
        ResultSet rs = st.executeQuery(query);

        while (rs.next()) {
            tbl.addRow(new Object[]{
                rs.getString("Id Karyawan"),
                rs.getString("Nama Karyawan"),
            });
            displayArea.setModel(tbl);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Koneksi Database Gagal" + e.getMessage());
    }
    }//GEN-LAST:event_searchFieldActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void displayAreaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayAreaMouseClicked
        // TODO add your handling code here:
        int selectedRow = displayArea.getSelectedRow();

        // Get values from selected row
        String id = tbl.getValueAt(selectedRow, 0).toString();
        String nama = tbl.getValueAt(selectedRow, 1).toString();
//        String pass = tbl.getValueAt(selectedRow, 2).toString();

        // Set values to form fields
        idField.setText(id);
        namaField.setText(nama);
//        passwordField.setText(pass);
        }

        private void txtcariKeyPressed(java.awt.event.KeyEvent evt) {
            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                tabel();
            }
    }//GEN-LAST:event_displayAreaMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Karyawan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Karyawan().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel back;
    private javax.swing.JTable displayArea;
    private javax.swing.JLabel hapus;
    private javax.swing.JTextField idField;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField namaField;
    private javax.swing.JTextField passwordField;
    private javax.swing.JLabel search;
    private javax.swing.JTextField searchField;
    private javax.swing.JLabel simpan;
    private javax.swing.JLabel ubah;
    // End of variables declaration//GEN-END:variables


    
}
